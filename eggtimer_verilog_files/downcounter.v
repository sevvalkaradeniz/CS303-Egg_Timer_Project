/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module Mux_2x1_NBits #(
    parameter Bits = 2
)
(
    input [0:0] sel,
    input [(Bits - 1):0] in_0,
    input [(Bits - 1):0] in_1,
    output reg [(Bits - 1):0] out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module Mux_2x1
(
    input [0:0] sel,
    input in_0,
    input in_1,
    output reg out
);
    always @ (*) begin
        case (sel)
            1'h0: out = in_0;
            1'h1: out = in_1;
            default:
                out = 'h0;
        endcase
    end
endmodule


module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Mux_4x1
(
    input [1:0] sel,
    input in_0,
    input in_1,
    input in_2,
    input in_3,
    output reg out
);
    always @ (*) begin
        case (sel)
            2'h0: out = in_0;
            2'h1: out = in_1;
            2'h2: out = in_2;
            2'h3: out = in_3;
            default:
                out = 'h0;
        endcase
    end
endmodule


module downcounter_new (
  input EN,
  input LOAD,
  input CLK,
  input RESET,
  input [3:0] IN1,
  input rst,
  output [3:0] CNT,
  output ZERO
);
  wire [3:0] s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  wire s11;
  wire [1:0] s12;
  wire s13;
  wire s14;
  wire s15;
  wire [1:0] s16;
  wire s17;
  wire s18;
  wire s19;
  wire [1:0] s20;
  wire s21;
  wire s22;
  wire s23;
  wire [1:0] s24;
  wire s25;
  wire s26;
  wire s27;
  wire s28;
  wire s29;
  wire s30;
  wire s31;
  wire s32;
  wire s33;
  wire s34;
  wire s35;
  wire s36;
  wire [3:0] s37;
  assign s12[0] = EN;
  assign s12[1] = LOAD;
  assign s9 = ~ RESET;
  assign s37[0] = 1'b0;
  assign s37[1] = 1'b0;
  assign s37[2] = 1'b0;
  assign s37[3] = 1'b0;
  assign s25 = IN1[0];
  assign s28 = IN1[1];
  assign s31 = IN1[2];
  assign s34 = IN1[3];
  assign s26 = s37[0];
  assign s29 = s37[1];
  assign s32 = s37[2];
  assign s35 = s37[3];
  Mux_2x1 Mux_2x1_i0 (
    .sel( rst ),
    .in_0( s25 ),
    .in_1( s26 ),
    .out( s27 )
  );
  Mux_2x1 Mux_2x1_i1 (
    .sel( rst ),
    .in_0( s28 ),
    .in_1( s29 ),
    .out( s30 )
  );
  Mux_2x1 Mux_2x1_i2 (
    .sel( rst ),
    .in_0( s31 ),
    .in_1( s32 ),
    .out( s33 )
  );
  Mux_2x1 Mux_2x1_i3 (
    .sel( rst ),
    .in_0( s34 ),
    .in_1( s35 ),
    .out( s36 )
  );
  assign s0[0] = s27;
  assign s0[1] = s30;
  assign s0[2] = s33;
  assign s0[3] = s36;
  assign s1 = s0[0];
  assign s2 = s0[1];
  assign s3 = s0[2];
  assign s4 = s0[3];
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( s9 ),
    .D( s10 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s5 ),
    .\~Q ( s11 )
  );
  Mux_4x1 Mux_4x1_i5 (
    .sel( s12 ),
    .in_0( s5 ),
    .in_1( s11 ),
    .in_2( s1 ),
    .in_3( s1 ),
    .out( s10 )
  );
  assign s13 = (s11 & EN);
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i6 (
    .Set( s9 ),
    .D( s14 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s6 ),
    .\~Q ( s15 )
  );
  Mux_4x1 Mux_4x1_i7 (
    .sel( s16 ),
    .in_0( s6 ),
    .in_1( s15 ),
    .in_2( s2 ),
    .in_3( s2 ),
    .out( s14 )
  );
  assign s16[0] = s13;
  assign s16[1] = LOAD;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i8 (
    .Set( s9 ),
    .D( s18 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s7 ),
    .\~Q ( s19 )
  );
  Mux_4x1 Mux_4x1_i9 (
    .sel( s20 ),
    .in_0( s7 ),
    .in_1( s19 ),
    .in_2( s3 ),
    .in_3( s3 ),
    .out( s18 )
  );
  assign s20[0] = s17;
  assign s20[1] = LOAD;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i10 (
    .Set( s9 ),
    .D( s22 ),
    .C( CLK ),
    .Clr( 1'b0 ),
    .Q( s8 ),
    .\~Q ( s23 )
  );
  Mux_4x1 Mux_4x1_i11 (
    .sel( s24 ),
    .in_0( s8 ),
    .in_1( s23 ),
    .in_2( s4 ),
    .in_3( s4 ),
    .out( s22 )
  );
  assign s24[0] = s21;
  assign s24[1] = LOAD;
  assign CNT[0] = s5;
  assign CNT[1] = s6;
  assign CNT[2] = s7;
  assign CNT[3] = s8;
  assign s17 = (s15 & s13);
  assign s21 = (s19 & s17);
  assign ZERO = (s23 & s21);
endmodule

module downcounter (
  input rst,
  input count,
  input load,
  input [3:0] pm10,
  input [3:0] pm1,
  input [3:0] ps10,
  input [3:0] ps1,
  input c1khz,
  output [3:0] s1,
  output [3:0] s10,
  output [3:0] m1,
  output [3:0] m10,
  output zero
);
  wire s0;
  wire s2;
  wire s3;
  wire [3:0] s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire [3:0] s9;
  wire s11;
  wire s12;
  wire [3:0] s13;
  wire s14;
  wire [3:0] s15;
  wire s16;
  wire [3:0] s17;
  wire [3:0] s18;
  wire [3:0] s19;
  wire [3:0] s20;
  assign s17[0] = 1'b1;
  assign s17[1] = 1'b0;
  assign s17[2] = 1'b0;
  assign s17[3] = 1'b1;
  assign s19[0] = 1'b1;
  assign s19[1] = 1'b0;
  assign s19[2] = 1'b0;
  assign s19[3] = 1'b1;
  assign s18[0] = 1'b1;
  assign s18[1] = 1'b0;
  assign s18[2] = 1'b1;
  assign s18[3] = 1'b0;
  assign s20[0] = 1'b1;
  assign s20[1] = 1'b0;
  assign s20[2] = 1'b0;
  assign s20[3] = 1'b1;
  assign s5 = ~ rst;
  assign s16 = (s5 | load);
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i0 (
    .sel( s16 ),
    .in_0( s17 ),
    .in_1( pm1 ),
    .out( s9 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i1 (
    .sel( s16 ),
    .in_0( s18 ),
    .in_1( ps10 ),
    .out( s13 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i2 (
    .sel( s16 ),
    .in_0( s19 ),
    .in_1( ps1 ),
    .out( s15 )
  );
  Mux_2x1_NBits #(
    .Bits(4)
  )
  Mux_2x1_NBits_i3 (
    .sel( s16 ),
    .in_0( s20 ),
    .in_1( pm10 ),
    .out( s4 )
  );
  assign s3 = ((s16 & c1khz) | count);
  downcounter_new downcounter_new_i4 (
    .EN( s0 ),
    .LOAD( s2 ),
    .CLK( s3 ),
    .RESET( 1'b1 ),
    .IN1( s4 ),
    .rst( s5 ),
    .CNT( m10 ),
    .ZERO( s6 )
  );
  downcounter_new downcounter_new_i5 (
    .EN( s7 ),
    .LOAD( s8 ),
    .CLK( s3 ),
    .RESET( 1'b1 ),
    .IN1( s9 ),
    .rst( s5 ),
    .CNT( m1 ),
    .ZERO( s0 )
  );
  downcounter_new downcounter_new_i6 (
    .EN( s11 ),
    .LOAD( s12 ),
    .CLK( s3 ),
    .RESET( 1'b1 ),
    .IN1( s13 ),
    .rst( s5 ),
    .CNT( s10 ),
    .ZERO( s7 )
  );
  downcounter_new downcounter_new_i7 (
    .EN( 1'b1 ),
    .LOAD( s14 ),
    .CLK( s3 ),
    .RESET( 1'b1 ),
    .IN1( s15 ),
    .rst( s5 ),
    .CNT( s1 ),
    .ZERO( s11 )
  );
  assign s8 = (s0 | s16);
  assign s12 = (s7 | s16);
  assign s14 = (s11 | s16);
  assign s2 = (s6 | s16);
  assign zero = (s11 & s6 & s0 & s7);
endmodule
